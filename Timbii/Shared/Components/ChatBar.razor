<footer class="chat-bar">
    <div class="attach-btns">
        <button class="attach-btn icon-btn"><PlusIcon /></button>
    </div>
    <form id="chat-form" @onsubmit=InitiateMessage>
        <div class="chat-input">
            @if (!VoiceMode)
            {
                @* <textarea id="chat-textarea" type="text" rows="1" @bind=Text placeholder="Type your message..." oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"' style="@(string.IsNullOrEmpty(Text) ? "height: fit-content;" : "")" @ref=TextArea @onkeydown=InitiateMessage @onkeydown:preventDefault="preventDefault" /> *@
                <div id="chat-textarea" data-text="Type to send messages..." aria-label="Message" contenteditable  @ref=TextArea @onkeydown=HandleEnter @onkeydown:preventDefault="preventDefault">
                </div>
            } else
            {
                @* <textarea id="chat-textarea" type="text" rows="1" @bind=Transcription placeholder="Speak anytime..." oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"' style="@(string.IsNullOrEmpty(Transcription) ? "height: fit-content;" : "")" @ref=TextArea @onkeydown=InitiateMessage @onkeydown:preventDefault="preventDefault" /> *@
                <div id="chat-textarea" placeholder="Speak anytime..." aria-label="Message" contenteditable @ref=TextArea @onkeydown=HandleEnter @onkeydown:preventDefault="preventDefault">
                </div>
            }
        </div>
        @if (!VoiceMode)
        {
            <div class="form-btns">
                <button id="submit-btn" class="send-btn icon-btn" disabled=@enableSendBtn) type=submit><SendIcon /></button>
            </div>
        } 
        else
        {
            <button id="send-btn" class="record-btn icon-btn" type=submit><MicrophoneIcon /></button>
        }
    </form>
</footer>

<script>
    document.querySelector("chat-textarea").addEventListener("keydown", function(event) {
      // Check if the pressed key is Enter (keyCode 13 or key "Enter")
      if (event.key === "Enter" || event.keyCode === 13) {
        // Check if the Shift key is NOT pressed
        if (!event.shiftKey) {
          event.preventDefault(); // Prevent the default action (e.g., submitting a form, adding a new line)
          // You can add your desired action here when Enter is pressed alone
          console.log("Enter pressed without Shift - default prevented");
        } else {
          // Shift + Enter was pressed, allow the default action or perform a different action
          console.log("Shift + Enter pressed - default allowed or custom action");
          // For instance, if you're in a textarea, this would add a new line.
          // Or you could trigger a form submission.
        }
      }
    });

    function getInnerText(ref, elem) {
        return text = elem.innerText
    }

    function setText(event, ref, elem) {
        event.preventDefault();
        var text = getInnerText(ref, elem);
        ref.invokeMethodAsync("SetText", text);
        //console.log(text);
    }

    function initiateMessage(ref, elem) {
        var text = getInnerText(ref, elem);
        sendMessage(ref, text);
    }

    function sendMessage(ref, text) {
        ref.invokeMethodAsync("SendMessage", text);
    }

    function clearTextarea(elem) {
        elem.innerHTML = "";
    }
</script>

@code {
    [Parameter] public bool VoiceMode { get; set; } = false;
    [Parameter] public EventCallback<string> OnSendMessage { get; set; }
    [Parameter] public bool MessageSent { get; set; } = false;

    string? Text;
    string? Transcription;
    bool preventDefault = false;
    ElementReference TextArea;
    bool enableSendBtn = false;

    protected override async Task OnParametersSetAsync()
    {
        if (MessageSent)
        {
            await ResetInput();
        }
    }

    void InitiateMessage()
    {
        if (!VoiceMode)
        {
            Js.InvokeVoidAsync("initiateMessage", DotNetObjectReference.Create(this), TextArea);
        }
        else
        {
            RecordVoiceMessage();
        }
    }

    void HandleEnter(KeyboardEventArgs? args)
    {
        Js.InvokeVoidAsync("setText", args, DotNetObjectReference.Create(this), TextArea);

        if (string.IsNullOrEmpty(Text))
        {
            enableSendBtn = false;
            Console.WriteLine("Text is empty, disabling send button.");
        } else
        {
            enableSendBtn = true;
            Console.WriteLine("Text is not empty, enabling send button.");
        }

        if (args?.Code == "Enter" && !args.ShiftKey)
        {
            preventDefault = true;
            InitiateMessage();
        }
        else
        {
            preventDefault = false;
        }
    }

    private async Task<string> GetStringFromJs()
    {
        var innerText = await Js.InvokeAsync<string>("getInnerHtml", "chat-textarea");

        if (innerText != null)
        {
            return innerText;
        }
        else
        {
            return string.Empty;
        }
    }

    [JSInvokable("SetText")]
    public void SetText(string text)
    {
        Text = text;
        StateHasChanged();
    }

    [JSInvokable("SendMessage")]
    public async void SendMessage(string text)
    {
        if (!VoiceMode)
        {
            Text = text?.Trim('\r', '\n', ' ');

            if (!string.IsNullOrWhiteSpace(Text))
            {
                await OnSendMessage.InvokeAsync(Text);
                StateHasChanged();
            }
            // if (!string.IsNullOrWhiteSpace(Text))
            // {
            //     var text = Text?.Trim('\r', '\n', ' ');
            //     Console.WriteLine($"Sending message: {text}");
            //     OnSendMessage.InvokeAsync(text);
            // }
            // var newMessage = await Api.TypeMessageAsync(new TypeMessageRequest { RoomId = Room.RoomId, Text = text, MessageId = SelectedMessage?.Id });
            // await TextArea.FocusAsync();

            // if (SelectedMessage != null && OnDoneEditing.HasDelegate)
            //     await OnDoneEditing.InvokeAsync(newMessage);
        }
    }

    void RecordVoiceMessage()
    {
        Console.WriteLine("Starting voice message...");
        // logic to record, transcribe, and translate vooice message
    }

    void SendVoiceMessage()
    {
        Console.WriteLine("Sending voice message...");
        // voice message sent as recording with transcription and translation
    }

    async Task ResetInput()
    {
        Text = string.Empty;
        Transcription = string.Empty;
        await Js.InvokeVoidAsync("clearTextarea", TextArea);
        await TextArea.FocusAsync();
    }
}