@using Microsoft.AspNetCore.Components.Forms
@using Sparc.Blossom.Authentication

<div class="presence-selector">
    <h4>Status</h4>

    @if (Avatar.Presence != null)
    {
        <select value="@Avatar.Presence.Presence" @onchange="OnPresenceChanged">
            <option value="online">🟢 Online</option>
            <option value="unavailable">🟡 Away</option>
            <option value="offline">⚫ Offline</option>
        </select>

        <input type="text" @bind="@Avatar.Presence.StatusMsg" @onblur="SavePresenceMsg" placeholder="Status message..." />

        <p>
            Last active:
            @if (Avatar.Presence.CurrentlyActive && Avatar.Presence.Presence == "online")
            {
                <span>online</span>
            }
            else if (Avatar.Presence.LastActiveAgo.HasValue)
            {
                <span>@($"{Avatar.Presence.LastActiveAgo.Value / 60000} minutes ago")</span>
            }
            else
            {
                <span>never</span>
            }
        </p>

    }
</div>


@inject ISparcAura Aura
@code {
    [Parameter] public required BlossomAvatar Avatar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Avatar.Presence != null)
        {
            var presence = await Chats.GetPresenceAsync(Avatar.Id);
        }
    }

    protected override void OnParametersSet()
    {
        if (Avatar.Presence == null)
        {
            Avatar.Presence = new BlossomPresence
            {
                Presence = "offline",
                StatusMsg = null,
                LastActiveAt = null
            };
        }
    }

    private async Task SavePresenceMsg()
    {
        await Chats.SetPresenceAsync(Avatar.Id, Avatar.Presence);
    }

    private async Task OnPresenceChanged(ChangeEventArgs e)
    {
        var status = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(status))
            return;

        Avatar.Presence.Presence = status;

        Avatar.Presence.ApplyToAvatar(Avatar, isProactiveEvent: true);

        await Aura.UpdateUserInfo(Avatar);
        await Chats.SetPresenceAsync(Avatar.Id, Avatar.Presence);
    }
}