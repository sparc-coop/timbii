@page "/chats/{roomId}"

@layout AppLayout

<TopBar Page="Chat" OnToggleVoiceMode=ToggleVoiceMode Room="Room" />

<main>
    <div class="message-list">
        @foreach (var msg in Messages)
        {
            <div class="message-container @(IsUserMessage(msg.Sender) ? "my-message" : "")">
                <MessageCard Message=@msg IsMine=IsUserMessage(msg.Sender) />
            </div>
        }
    </div>
</main>

<ChatBar OnSendMessage=SendMessage VoiceMode=@voiceMode MessageSent=messageSent />

@inject ISparcAura Aura

@code {
    [Parameter] public required string RoomId { get; set; }

    BlossomUser? User { get; set; }
    private List<MatrixEvent<MatrixMessage>> Messages = [];
    private MatrixRoom? Room { get; set; }

    bool voiceMode = false;
    bool messageSent = false;

    protected async override Task OnInitializedAsync()
    {
        User = await Aura.UserInfo();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(RoomId))
        {
            Room = await Chats.GetRoomSummaryAsync(RoomId);
            await GetMessagesAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Messages.Count > 0)
        {
            await Js.InvokeVoidAsync("scrollToLastMessage");
        }
    }

    private async Task GetMessagesAsync()
    {
        Messages = await Chats.GetMessagesAsync(Room!.RoomId);
    }

    private async Task SendMessage(string messageText)
    {
        if (!string.IsNullOrWhiteSpace(messageText))
        {
            var txnId = Guid.NewGuid().ToString();
            await Chats.SendMessageAsync(Room!.RoomId, "m.room.message", txnId, new(messageText));

            // currentMessage = "";
            await GetMessagesAsync();
            messageSent = true;
        }
    }

    void ToggleVoiceMode(bool voiceBool)
    {
        voiceMode = voiceBool;
    }

    private bool IsUserMessage(string userId)
    {
        var matrixId = User?.Identities?.FirstOrDefault(x => x.Type == "Matrix")?.Id;
        if (userId == matrixId)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}