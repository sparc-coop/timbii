@page "/chats"
@layout AppLayout

<PageTitle>Chats</PageTitle>

 <TopBar Page="Chats" />

<main>
    <div class="chat-list">
        @if (Rooms == null)
        {
            <p><em>Loading chats…</em></p>
        }
        else if (!Rooms.Any())
        {
            <p><em>No chats available.</em></p>
        }
        else
        {
            @foreach (var room in Rooms)
            {
                <ChatCard User=User Room=room />
            }
        }
    </div>
</main>

<BottomBar />

@inject NavigationManager Nav
@code {
    BlossomUser? User { get; set; }
    private string? RoomId { get; set; }
    private List<MatrixRoomSummary> Rooms = [];

    protected async override Task OnInitializedAsync()
    {
        await GetAllRooms();
    }

    private async Task GetAllRooms()
    {
        var response = await Chats.GetPublicRoomsAsync();
        Rooms = response.Chunk;
    }

    private void GoToRoom(MatrixRoomSummary room)
    {
        Nav.NavigateTo("/chats/" + room.LocalId);
    }

    private void GoToCreateRoom()
    {
        Nav.NavigateTo("/chats/new");
    }

    private async Task JoinRoom(MatrixRoomSummary room)
    {
        await Chats.JoinRoomAsync(room.RoomId);
        await GetAllRooms();
        StateHasChanged();
    }

    private async Task LeaveRoom(MatrixRoomSummary room)
    {
        await Chats.LeaveRoomAsync(room.RoomId);
        await GetAllRooms();
        StateHasChanged();
        var response = await Chats.GetPublicRoomsAsync();
        Rooms = response.Chunk;
        if (Rooms.Any())
        {
            RoomId = Rooms.First().RoomId;
        }
    }

    async Task Create()
    {
        var room = await Chats.CreateRoomAsync(new(Visibility: "public"));
        Nav.Refresh(true);
    }

    private bool UserIsInRoom(MatrixRoomSummary room)
    {
        return true;
    }
}

@* <TopBar Page="Chats" />

<main>
    @if (Room != null)
    {
        <ChatCard Room=Room />
    }
</main>

<BottomBar />

@code {
    [CascadingParameter] User User { get; set; }

    Room Room;
    List<User> Members = new List<User>();
    User Member1 = new User(
        firstName: "John",
        lastName: "Doe",
        contact: new Contact(
            address1: "123 Main St",
            address2: null,
            city: "Springfield",
            state: "IL",
            postalCode: "62701",
            country: "USA",
            emails: new List<Email>(),
            phoneNumbers: new List<Phone>()
        ),
        prefix: "Mr.",
        suffix: null
    );
    List<Message> Messages = new List<Message>();


    protected override void OnInitialized()
    {
        Member1.Contact.EmailAddresses = new List<Email>() { new Email(type: "Personal", address: "johndoe1@gmail.com") };
        Member1.Contact.PhoneNumbers = new List<Phone>() {
            new Phone(type: "Home", number: "(239) 555-0108"),
            new Phone(type: "Mobile", number: "(239) 555-0108"),
        };

        Message message1 = new Message
        (
            sender: Member1,
            roomId: "1",
            text: "Curabitur tempor quis eros tempus lacinia. Nam bibendum pellentesque quam a convallis. Sed ut vulputate nisi. Integer in felis sed leo vestibulum venenatis. Suspendisse quis arcu sem. Aenean feugiat ex eu vestibulum vestibulum. ",
            timestamp: DateTime.Now.AddMinutes(-12)
        );

        Message message2 = new Message
        (
            sender: Member1,
            roomId: "1",
            text: "Nam pulvinar blandit velit!! 😊",
            timestamp: DateTime.Now.AddMinutes(-10)
        );

        Message message3 = new Message
        (
            sender: User,
            roomId: "1",
            text: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
            timestamp: DateTime.Now.AddMinutes(-8)
        );

        Messages.Add(message1);
        Messages.Add(message2);
        Messages.Add(message3);

        Members.Add(Member1);
        Room = new Room(User, Members);
    }
} *@